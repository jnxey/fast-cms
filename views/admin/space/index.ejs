<%- include ('./style.ejs') -%>
<div id="page-space" class="page-space-wrap">
    <el-button type="primary" @click="addMenuOpen()">添加新菜单</el-button>
    <%- include ('./_widgets/menu-dialog/index.ejs') -%>
    <el-container>
        <el-aside width="200px">
            <%- include ('./_widgets/menu-list/index.ejs') -%>
        </el-aside>
        <el-main>
            <%- include ('./_widgets/current-page/index.ejs') -%>
        </el-main>
    </el-container>
</div>

<script>
  window.TempdataMenuList = <%- data.menus %>;
  window.TempdataMenuForm = {
    menu_name: '',
    menu_mark: '',
    menu_type: window.MENU_TYPE.menu,
    parent_id: window.MENU_ROOT,
    content_id: 0,
    sort: 0
  };
  window.TempdataContentForm = {
    menu_id: 0,
    doc_type: window.CONTENT_TYPE_MAP.rich,
  };
  Vue.createApp({
    data() {
      this.menuType = window.MENU_TYPE;
      this.menuProps = {children: 'children', label: 'menu_name'};
      this.contentMap = window.CONTENT_TYPE_MAP;
      this.contentInfo = window.CONTENT_TYPE_INFO;
      return {
        visibleMenu: false,
        formMenu: Object.assign({}, window.TempdataMenuForm),
        menuList: window.TempdataMenuList,
        menuTree: [],
        currentPage: null,
        visibleContent: false,
        formContent: Object.assign({}, window.TempdataContentForm),
        pageContent: false
      };
    },
    created() {
      this.initTree();
    },
    methods: {
      /// 初始化菜单树
      initTree: function () {
        this.menuTree = this.getMenuTree(this.menuList);
      },
      /// 添加菜单弹窗
      addMenuOpen: function (id) {
        var temp = Boolean(id) ? {parent_id: id} : {};
        this.formMenu = Object.assign({}, window.TempdataMenuForm, temp);
        this.visibleMenu = true;
      },
      /// 编辑菜单弹窗
      editMenuOpen(data) {
        this.formMenu = Object.assign({}, window.TempdataMenuForm, data);
        this.visibleMenu = true;
      },
      /// 添加菜单
      addMenuSubmit: function () {
        var ctx = this;
        var isValid = ctx.formMenu.menu_name && ctx.formMenu.menu_mark;
        if (isValid) {
          var url = '/api/admin-home/menu-add-or-edit';
          var params = Object.assign({}, this.formMenu);
          var tipsSuccess = params.id ? '编辑成功' : '添加成功';
          var tipsError = params.id ? '编辑失败' : '添加失败';
          var tipsLoading = params.id ? '正在编辑...' : '正在添加...';
          var loading = ElementPlus.ElLoading.service({
            lock: true,
            text: tipsLoading,
            background: 'rgba(0,0,0,0.7)'
          });
          axios.post(url, params).then(function (response) {
            var result = response.data;
            if (result.code === window.RESPONSE_MAP.success.code) {
              ctx.visibleMenu = false;
              ElementPlus.ElMessage({message: tipsSuccess, type: 'success'});

              if (Boolean(params.id)) {
                var key = ctx.menuList.findIndex(function (item) {
                  return item.id === params.id;
                });
                if (key > -1) {
                  Object.assign(ctx.menuList[key], result.result);
                  ctx.initTree();
                }
              } else {
                ctx.menuList.push(result.result);
                ctx.initTree();
              }
            } else {
              ElementPlus.ElMessageBox.alert(result.msg, tipsError);
            }
          }).catch(function (err) {
            ElementPlus.ElMessageBox.alert(err.toString(), tipsError);
          }).finally(function () {
            loading.close();
          });
        } else {
          ElementPlus.ElMessage({message: '请完善表单信息', type: 'warning'});
        }
      },
      /// 获取菜单树
      getMenuTree: function (menus) {
        var list = JSON.parse(JSON.stringify(menus));

        function getChildren(id) {
          var result = [];
          list.forEach(function (val) {
            if (val.parent_id === id) {
              val.children = getChildren(val.id);
              result.push(val);
            }
          });
          if (result.length > 0) {
            return result;
          } else {
            return null;
          }
        }

        return getChildren(window.MENU_ROOT);
      },
      /// 设置当前页面
      setCurrentPage: function (menu) {
        if (menu.menu_type === this.menuType.menu) return;
        var current = Object.assign({}, menu);
        var pageContent = null;
        this.clearPageContent();
        if (!Boolean(menu.content_id)) {
          this.setPageContent(current, pageContent);
        } else {
          var ctx = this;
          var tipsError = '查询失败';
          var tipsLoading = '正在加载...';
          var loading = ElementPlus.ElLoading.service({
            lock: true,
            text: tipsLoading,
            background: 'rgba(0,0,0,0.7)'
          });
          var url = '/api/admin-home/content-get';
          var params = {id: menu.content_id};
          axios.get(url, {params: params}).then(function (response) {
            var result = response.data;
            if (result.code === window.RESPONSE_MAP.success.code) {
              pageContent = result.result;
            } else {
              ElementPlus.ElMessageBox.alert(result.msg, tipsError);
            }
          }).catch(function (err) {
            ElementPlus.ElMessageBox.alert(err.toString(), tipsError);
          }).finally(function () {
            loading.close();
            ctx.setPageContent(current, pageContent);
          });
        }
      },
      /// 清空pageContent
      clearPageContent() {
        this.currentPage = null;
        this.pageContent = null;
      },
      /// 设置pageContent
      setPageContent(current, pageContent) {
        var ctx = this;
        this.$nextTick(function () {
          ctx.currentPage = current;
          ctx.pageContent = pageContent;
          if (!pageContent) return;
          this.$nextTick(function () {
            if (pageContent.doc_type === ctx.contentMap.rich) {
              var createEditor = window.wangEditor.createEditor;
              var createToolbar = window.wangEditor.createToolbar;
              var editorConfig = {
                placeholder: 'Type here...',
                onChange: function (editor) {
                  const html = editor.getHtml()
                  console.log('editor content', html)
                }
              }
              var editor = createEditor({
                selector: '#editor-container',
                html: '<p><br></p>',
                config: editorConfig,
                mode: 'default'
              })
              var toolbarConfig = {}
              createToolbar({
                editor: editor, selector: '#toolbar-container', config: toolbarConfig, mode: 'default'
              });
            } else if (pageContent.doc_type === ctx.contentMap.markdown) {
              var target = document.getElementById("content-markdown-box");
              new SimpleMDE({element: target});
            }
          });
        });
      },
      /// 添加文档内容弹窗
      addContentOpen: function () {
        const menu_id = this.currentPage.id;
        this.formContent = Object.assign({}, window.TempdataContentForm, {menu_id: menu_id});
        this.visibleContent = true;
      },
      /// 添加文档内容
      addContentSubmit: function () {
        var ctx = this;
        var url = '/api/admin-home/content-add';
        var params = Object.assign({}, this.formContent);
        var tipsSuccess = '添加成功';
        var tipsError = '添加失败';
        var tipsLoading = '正在添加...';
        var loading = ElementPlus.ElLoading.service({
          lock: true,
          text: tipsLoading,
          background: 'rgba(0,0,0,0.7)'
        });
        axios.post(url, params).then(function (response) {
          var result = response.data;
          if (result.code === window.RESPONSE_MAP.success.code) {
            ctx.visibleContent = false;
            ElementPlus.ElMessage({message: tipsSuccess, type: 'success'});
            ctx.pageContent = result.result || {};
            var key = ctx.menuList.findIndex(function (item) {
              return item.id === params.menu_id;
            });
            if (key > -1) {
              Object.assign(ctx.menuList[key], {content_id: ctx.pageContent.id});
              ctx.initTree();
            }
          } else {
            ElementPlus.ElMessageBox.alert(result.msg, tipsError);
          }
        }).catch(function (err) {
          ElementPlus.ElMessageBox.alert(err.toString(), tipsError);
        }).finally(function () {
          loading.close();
        });
      }
    }
  }).use(ElementPlus, {locale: window.ElementPlusLocaleZhCn}).mount("#page-space");
</script>
